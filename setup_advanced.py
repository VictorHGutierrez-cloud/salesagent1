#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ SALES AGENT IA - SETUP AVAN√áADO
==================================
Sistema de instala√ß√£o e configura√ß√£o autom√°tica com valida√ß√£o completa
"""

import os
import sys
import json
import shutil
import subprocess
import platform
from pathlib import Path
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from datetime import datetime

import requests
from rich.console import Console
from rich.panel import Panel
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn, TimeElapsedColumn
from rich.table import Table
from rich.prompt import Prompt, Confirm
from rich import box

console = Console()

@dataclass
class SystemRequirement:
    """Requisito do sistema"""
    name: str
    description: str
    required: bool
    current_version: Optional[str] = None
    required_version: Optional[str] = None
    status: str = "unknown"  # unknown, checking, ok, error, warning

@dataclass
class DependencyInfo:
    """Informa√ß√µes de depend√™ncia"""
    name: str
    version: str
    description: str
    install_command: str
    test_import: str
    optional: bool = False

class AdvancedSetup:
    """Sistema de setup avan√ßado com valida√ß√£o completa"""
    
    def __init__(self):
        self.base_dir = Path(__file__).parent
        self.config_dir = self.base_dir / "config"
        self.backup_dir = self.base_dir / "backups"
        self.logs_dir = self.base_dir / "logs"
        
        # Cria diret√≥rios necess√°rios
        self._create_directories()
        
        # Configura√ß√µes do sistema
        self.system_config = self._load_system_config()
        
        # Depend√™ncias necess√°rias
        self.dependencies = self._get_dependencies()
        
        # Requisitos do sistema
        self.requirements = self._get_system_requirements()
    
    def _create_directories(self):
        """Cria diret√≥rios necess√°rios"""
        directories = [
            self.config_dir,
            self.backup_dir,
            self.logs_dir,
            self.base_dir / "temp",
            self.base_dir / "embeddings"
        ]
        
        for directory in directories:
            directory.mkdir(exist_ok=True)
    
    def _load_system_config(self) -> Dict:
        """Carrega configura√ß√£o do sistema"""
        config_file = self.config_dir / "system_config.json"
        
        default_config = {
            "version": "1.0.0",
            "last_setup": None,
            "python_version": None,
            "platform": platform.system(),
            "architecture": platform.machine(),
            "dependencies_installed": [],
            "backup_enabled": True,
            "auto_update": True,
            "log_level": "INFO"
        }
        
        if config_file.exists():
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    return {**default_config, **json.load(f)}
            except Exception as e:
                console.print(f"[yellow]‚ö†Ô∏è Erro ao carregar config: {e}[/yellow]")
                return default_config
        
        return default_config
    
    def _save_system_config(self):
        """Salva configura√ß√£o do sistema"""
        config_file = self.config_dir / "system_config.json"
        
        self.system_config["last_setup"] = datetime.now().isoformat()
        self.system_config["python_version"] = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        
        try:
            with open(config_file, 'w', encoding='utf-8') as f:
                json.dump(self.system_config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            console.print(f"[red]‚ùå Erro ao salvar config: {e}[/red]")
    
    def _get_dependencies(self) -> List[DependencyInfo]:
        """Lista todas as depend√™ncias necess√°rias"""
        return [
            DependencyInfo(
                name="openai",
                version=">=1.0.0",
                description="API da OpenAI para IA",
                install_command="pip install openai>=1.0.0",
                test_import="import openai"
            ),
            DependencyInfo(
                name="pandas",
                version=">=1.5.0",
                description="An√°lise de dados",
                install_command="pip install pandas>=1.5.0",
                test_import="import pandas"
            ),
            DependencyInfo(
                name="numpy",
                version=">=1.21.0",
                description="Computa√ß√£o num√©rica",
                install_command="pip install numpy>=1.21.0",
                test_import="import numpy"
            ),
            DependencyInfo(
                name="rich",
                version=">=13.0.0",
                description="Interface rica no terminal",
                install_command="pip install rich>=13.0.0",
                test_import="import rich"
            ),
            DependencyInfo(
                name="loguru",
                version=">=0.7.0",
                description="Sistema de logs avan√ßado",
                install_command="pip install loguru>=0.7.0",
                test_import="import loguru"
            ),
            DependencyInfo(
                name="sounddevice",
                version=">=0.4.0",
                description="Captura de √°udio",
                install_command="pip install sounddevice>=0.4.0",
                test_import="import sounddevice"
            ),
            DependencyInfo(
                name="soundfile",
                version=">=0.12.0",
                description="Processamento de arquivos de √°udio",
                install_command="pip install soundfile>=0.12.0",
                test_import="import soundfile"
            ),
            DependencyInfo(
                name="scipy",
                version=">=1.9.0",
                description="Processamento cient√≠fico",
                install_command="pip install scipy>=1.9.0",
                test_import="import scipy"
            ),
            DependencyInfo(
                name="sentence-transformers",
                version=">=2.2.0",
                description="Modelos de embeddings",
                install_command="pip install sentence-transformers>=2.2.0",
                test_import="import sentence_transformers"
            ),
            DependencyInfo(
                name="chromadb",
                version=">=0.4.0",
                description="Base de dados vetorial",
                install_command="pip install chromadb>=0.4.0",
                test_import="import chromadb"
            ),
            DependencyInfo(
                name="pystray",
                version=">=0.19.0",
                description="System tray interface",
                install_command="pip install pystray>=0.19.0",
                test_import="import pystray"
            ),
            DependencyInfo(
                name="PIL",
                version=">=9.0.0",
                description="Processamento de imagens",
                install_command="pip install Pillow>=9.0.0",
                test_import="import PIL"
            ),
            DependencyInfo(
                name="python-dotenv",
                version=">=1.0.0",
                description="Gerenciamento de vari√°veis de ambiente",
                install_command="pip install python-dotenv>=1.0.0",
                test_import="import dotenv"
            ),
            DependencyInfo(
                name="requests",
                version=">=2.28.0",
                description="Requisi√ß√µes HTTP",
                install_command="pip install requests>=2.28.0",
                test_import="import requests"
            ),
            DependencyInfo(
                name="tkinter",
                version="builtin",
                description="Interface gr√°fica (builtin)",
                install_command="builtin",
                test_import="import tkinter",
                optional=True
            )
        ]
    
    def _get_system_requirements(self) -> List[SystemRequirement]:
        """Lista requisitos do sistema"""
        return [
            SystemRequirement(
                name="Python",
                description="Vers√£o do Python",
                required=True,
                current_version=f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
                required_version="3.8.0"
            ),
            SystemRequirement(
                name="Internet",
                description="Conex√£o com internet",
                required=True
            ),
            SystemRequirement(
                name="Microfone",
                description="Dispositivo de √°udio",
                required=True
            ),
            SystemRequirement(
                name="Espa√ßo em disco",
                description="Espa√ßo dispon√≠vel",
                required=True
            ),
            SystemRequirement(
                name="Mem√≥ria RAM",
                description="Mem√≥ria dispon√≠vel",
                required=True
            )
        ]
    
    def run_complete_setup(self):
        """Executa setup completo com valida√ß√£o"""
        console.print(Panel.fit(
            "[bold blue]üöÄ SALES AGENT IA - SETUP AVAN√áADO[/bold blue]\n"
            "[cyan]Sistema de instala√ß√£o e configura√ß√£o autom√°tica[/cyan]",
            border_style="blue"
        ))
        
        try:
            # 1. Valida√ß√£o do sistema
            self._validate_system_requirements()
            
            # 2. Backup de configura√ß√µes existentes
            self._backup_existing_config()
            
            # 3. Instala√ß√£o de depend√™ncias
            self._install_dependencies()
            
            # 4. Configura√ß√£o do ambiente
            self._setup_environment()
            
            # 5. Valida√ß√£o final
            self._final_validation()
            
            # 6. Salva configura√ß√£o
            self._save_system_config()
            
            console.print(Panel.fit(
                "[bold green]‚úÖ SETUP CONCLU√çDO COM SUCESSO![/bold green]\n"
                "[cyan]O Sales Agent IA est√° pronto para uso[/cyan]",
                border_style="green"
            ))
            
        except Exception as e:
            console.print(f"[bold red]‚ùå Erro no setup: {e}[/bold red]")
            self._show_error_recovery()
            raise
    
    def _validate_system_requirements(self):
        """Valida requisitos do sistema"""
        console.print("\nüîç [bold yellow]Validando requisitos do sistema...[/bold yellow]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            console=console
        ) as progress:
            
            # Valida Python
            task = progress.add_task("Verificando Python...", total=None)
            self._check_python_version()
            progress.update(task, description="‚úÖ Python OK")
            
            # Valida internet
            task = progress.add_task("Verificando internet...", total=None)
            self._check_internet_connection()
            progress.update(task, description="‚úÖ Internet OK")
            
            # Valida microfone
            task = progress.add_task("Verificando microfone...", total=None)
            self._check_audio_devices()
            progress.update(task, description="‚úÖ Microfone OK")
            
            # Valida espa√ßo em disco
            task = progress.add_task("Verificando espa√ßo em disco...", total=None)
            self._check_disk_space()
            progress.update(task, description="‚úÖ Espa√ßo OK")
            
            # Valida mem√≥ria
            task = progress.add_task("Verificando mem√≥ria...", total=None)
            self._check_memory()
            progress.update(task, description="‚úÖ Mem√≥ria OK")
    
    def _check_python_version(self):
        """Verifica vers√£o do Python"""
        current_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        required_major, required_minor = 3, 8
        
        if sys.version_info.major < required_major or \
           (sys.version_info.major == required_major and sys.version_info.minor < required_minor):
            raise ValueError(f"Python {required_major}.{required_minor}+ necess√°rio. Atual: {current_version}")
    
    def _check_internet_connection(self):
        """Verifica conex√£o com internet"""
        try:
            response = requests.get("https://api.openai.com/v1/models", timeout=10)
            if response.status_code not in [200, 401]:  # 401 √© OK, significa que API existe
                raise ConnectionError("Sem acesso √† API da OpenAI")
        except Exception as e:
            raise ConnectionError(f"Problema de conectividade: {e}")
    
    def _check_audio_devices(self):
        """Verifica dispositivos de √°udio"""
        try:
            import sounddevice as sd
            devices = sd.query_devices()
            input_devices = [d for d in devices if d['max_input_channels'] > 0]
            
            if not input_devices:
                raise ValueError("Nenhum dispositivo de entrada de √°udio encontrado")
        except ImportError:
            # sounddevice n√£o instalado ainda, isso √© OK
            pass
        except Exception as e:
            raise ValueError(f"Problema com dispositivos de √°udio: {e}")
    
    def _check_disk_space(self):
        """Verifica espa√ßo em disco"""
        import shutil
        
        free_space = shutil.disk_usage(self.base_dir).free
        required_space = 2 * 1024 * 1024 * 1024  # 2GB
        
        if free_space < required_space:
            raise ValueError(f"Espa√ßo insuficiente. Necess√°rio: 2GB, Dispon√≠vel: {free_space // (1024**3)}GB")
    
    def _check_memory(self):
        """Verifica mem√≥ria dispon√≠vel"""
        try:
            import psutil
            memory = psutil.virtual_memory()
            if memory.available < 4 * 1024 * 1024 * 1024:  # 4GB
                console.print("[yellow]‚ö†Ô∏è Pouca mem√≥ria dispon√≠vel. Recomendado: 8GB+[/yellow]")
        except ImportError:
            # psutil n√£o instalado, n√£o √© cr√≠tico
            pass
    
    def _backup_existing_config(self):
        """Faz backup de configura√ß√µes existentes"""
        if not self.system_config.get("backup_enabled", True):
            return
        
        console.print("\nüíæ [bold yellow]Fazendo backup de configura√ß√µes...[/bold yellow]")
        
        backup_timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_path = self.backup_dir / f"backup_{backup_timestamp}"
        backup_path.mkdir(exist_ok=True)
        
        # Arquivos para backup
        files_to_backup = [
            ".env",
            "config.py",
            "config/system_config.json"
        ]
        
        for file_path in files_to_backup:
            source = self.base_dir / file_path
            if source.exists():
                dest = backup_path / file_path
                dest.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(source, dest)
        
        console.print(f"‚úÖ Backup salvo em: {backup_path}")
    
    def _install_dependencies(self):
        """Instala depend√™ncias necess√°rias"""
        console.print("\nüì¶ [bold yellow]Instalando depend√™ncias...[/bold yellow]")
        
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            TextColumn("[progress.percentage]{task.percentage:>3.0f}%"),
            TimeElapsedColumn(),
            console=console
        ) as progress:
            
            total_deps = len(self.dependencies)
            task = progress.add_task("Instalando...", total=total_deps)
            
            installed_deps = []
            
            for i, dep in enumerate(self.dependencies):
                progress.update(task, description=f"Instalando {dep.name}...")
                
                try:
                    if dep.install_command != "builtin":
                        result = subprocess.run(
                            dep.install_command.split(),
                            capture_output=True,
                            text=True,
                            timeout=300  # 5 minutos por depend√™ncia
                        )
                        
                        if result.returncode != 0:
                            if not dep.optional:
                                raise Exception(f"Erro ao instalar {dep.name}: {result.stderr}")
                            else:
                                console.print(f"[yellow]‚ö†Ô∏è {dep.name} falhou (opcional)[/yellow]")
                                continue
                    
                    # Testa importa√ß√£o
                    exec(dep.test_import)
                    installed_deps.append(dep.name)
                    
                except Exception as e:
                    if not dep.optional:
                        raise Exception(f"Falha ao instalar {dep.name}: {e}")
                    else:
                        console.print(f"[yellow]‚ö†Ô∏è {dep.name} falhou (opcional): {e}[/yellow]")
                
                progress.advance(task)
        
        self.system_config["dependencies_installed"] = installed_deps
        console.print(f"‚úÖ {len(installed_deps)} depend√™ncias instaladas com sucesso")
    
    def _setup_environment(self):
        """Configura ambiente do sistema"""
        console.print("\n‚öôÔ∏è [bold yellow]Configurando ambiente...[/bold yellow]")
        
        # Cria arquivo .env se n√£o existir
        env_file = self.base_dir / ".env"
        if not env_file.exists():
            env_example = self.base_dir / "env_example.txt"
            if env_example.exists():
                shutil.copy2(env_example, env_file)
                console.print("‚úÖ Arquivo .env criado")
            else:
                # Cria .env b√°sico
                with open(env_file, 'w', encoding='utf-8') as f:
                    f.write("# Sales Agent IA - Configura√ß√µes\n")
                    f.write("OPENAI_API_KEY=your_api_key_here\n")
                    f.write("LOG_LEVEL=INFO\n")
                console.print("‚úÖ Arquivo .env b√°sico criado")
        
        # Configura logs
        self._setup_logging()
        
        # Configura base de conhecimento
        self._setup_knowledge_base()
    
    def _setup_logging(self):
        """Configura sistema de logs"""
        log_config = {
            "version": 1,
            "disable_existing_loggers": False,
            "formatters": {
                "detailed": {
                    "format": "{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
                    "datefmt": "%Y-%m-%d %H:%M:%S"
                },
                "simple": {
                    "format": "{time:HH:mm:ss} | {level} | {message}"
                }
            },
            "handlers": {
                "console": {
                    "class": "logging.StreamHandler",
                    "level": "INFO",
                    "formatter": "simple",
                    "stream": "ext://sys.stdout"
                },
                "file": {
                    "class": "logging.handlers.RotatingFileHandler",
                    "level": "DEBUG",
                    "formatter": "detailed",
                    "filename": str(self.logs_dir / "sales_agent.log"),
                    "maxBytes": 10485760,  # 10MB
                    "backupCount": 5
                }
            },
            "loggers": {
                "": {
                    "level": "DEBUG",
                    "handlers": ["console", "file"],
                    "propagate": False
                }
            }
        }
        
        config_file = self.config_dir / "logging_config.json"
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(log_config, f, indent=2)
    
    def _setup_knowledge_base(self):
        """Configura base de conhecimento"""
        # Verifica se toolkit existe
        toolkit_dir = self.base_dir / "AE_SENIOR_TOOLKIT"
        if not toolkit_dir.exists():
            console.print("[yellow]‚ö†Ô∏è AE_SENIOR_TOOLKIT n√£o encontrado. Ser√° criado na primeira execu√ß√£o.[/yellow]")
            return
        
        console.print("‚úÖ Base de conhecimento ser√° constru√≠da na primeira execu√ß√£o")
    
    def _final_validation(self):
        """Valida√ß√£o final do sistema"""
        console.print("\nüîç [bold yellow]Valida√ß√£o final...[/bold yellow]")
        
        # Testa imports cr√≠ticos
        critical_imports = [
            "openai",
            "pandas", 
            "numpy",
            "rich",
            "loguru"
        ]
        
        for module in critical_imports:
            try:
                __import__(module)
                console.print(f"‚úÖ {module}")
            except ImportError as e:
                raise Exception(f"Falha na valida√ß√£o: {module} n√£o pode ser importado - {e}")
        
        # Testa configura√ß√£o OpenAI
        try:
            from dotenv import load_dotenv
            load_dotenv()
            
            api_key = os.getenv('OPENAI_API_KEY')
            if not api_key or api_key == "your_api_key_here":
                console.print("[yellow]‚ö†Ô∏è OPENAI_API_KEY n√£o configurada. Configure no arquivo .env[/yellow]")
            else:
                console.print("‚úÖ OpenAI API Key configurada")
        except Exception as e:
            console.print(f"[yellow]‚ö†Ô∏è Erro ao verificar API Key: {e}[/yellow]")
    
    def _show_error_recovery(self):
        """Mostra op√ß√µes de recupera√ß√£o de erro"""
        console.print("\nüîß [bold red]Op√ß√µes de recupera√ß√£o:[/bold red]")
        console.print("1. Execute: python setup_advanced.py --repair")
        console.print("2. Execute: python setup_advanced.py --reset")
        console.print("3. Verifique os logs em: logs/sales_agent.log")
        console.print("4. Entre em contato com suporte")
    
    def show_system_status(self):
        """Mostra status atual do sistema"""
        table = Table(title="üìä Status do Sistema")
        table.add_column("Componente", style="cyan")
        table.add_column("Status", style="green")
        table.add_column("Vers√£o", style="yellow")
        table.add_column("Observa√ß√µes", style="white")
        
        # Python
        python_version = f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}"
        table.add_row("Python", "‚úÖ OK", python_version, "")
        
        # Depend√™ncias
        for dep in self.dependencies:
            try:
                exec(dep.test_import)
                status = "‚úÖ OK"
                version = "Instalado"
            except:
                status = "‚ùå Faltando"
                version = "N√£o instalado"
            
            table.add_row(dep.name, status, version, dep.description)
        
        console.print(table)

def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Sales Agent IA - Setup Avan√ßado")
    parser.add_argument("--repair", action="store_true", help="Reparar instala√ß√£o")
    parser.add_argument("--reset", action="store_true", help="Resetar configura√ß√µes")
    parser.add_argument("--status", action="store_true", help="Mostrar status do sistema")
    
    args = parser.parse_args()
    
    setup = AdvancedSetup()
    
    if args.status:
        setup.show_system_status()
    elif args.reset:
        console.print("[bold red]‚ö†Ô∏è Resetando configura√ß√µes...[/bold red]")
        # Implementar reset
    elif args.repair:
        console.print("[bold yellow]üîß Reparando instala√ß√£o...[/bold yellow]")
        # Implementar reparo
    else:
        setup.run_complete_setup()

if __name__ == "__main__":
    main()
