"""
üöÄ SALES AGENT IA - VERS√ÉO SIMPLIFICADA
=====================================
Sistema b√°sico para teste inicial com OpenAI
"""

import os
import time
from pathlib import Path
from dotenv import load_dotenv

try:
    import openai
    from rich.console import Console
    from rich.panel import Panel
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False
    console = None

# Carrega configura√ß√µes
load_dotenv()

def setup_console():
    """Configura console de output"""
    if RICH_AVAILABLE:
        return Console()
    else:
        return None

def print_formatted(text, style="", console=None):
    """Print formatado que funciona com ou sem rich"""
    if console and RICH_AVAILABLE:
        console.print(text, style=style)
    else:
        print(text)

def test_openai_connection():
    """Testa conex√£o com OpenAI"""
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå OPENAI_API_KEY n√£o encontrada no arquivo .env")
        return False
    
    try:
        client = openai.OpenAI(api_key=api_key)
        
        print("üîÑ Testando conex√£o com OpenAI...")
        
        # Teste simples
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um consultor de vendas."},
                {"role": "user", "content": "Cliente disse: 'Est√° muito caro'. D√™ uma sugest√£o r√°pida."}
            ],
            max_tokens=100,
            temperature=0.3
        )
        
        suggestion = response.choices[0].message.content
        
        print("‚úÖ Conex√£o OpenAI - OK!")
        print(f"üí° Sugest√£o de teste: {suggestion}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o OpenAI: {e}")
        return False

def read_sales_toolkit():
    """L√™ alguns arquivos do toolkit como exemplo"""
    toolkit_dir = Path("AE_SENIOR_TOOLKIT")
    
    if not toolkit_dir.exists():
        print(f"‚ùå Diret√≥rio {toolkit_dir} n√£o encontrado")
        return []
    
    techniques = []
    
    # L√™ alguns arquivos principais
    key_files = [
        "02_QUALIFICACAO_LEADS/MEDDIC_Framework_Avancado.txt",
        "06_NEGOCIACAO_FECHAMENTO/Tecnicas_Fechamento_Avancadas.txt",
        "12_OBJECTION_HANDLING"  # Diret√≥rio inteiro se existir
    ]
    
    for file_path in key_files:
        full_path = toolkit_dir / file_path
        
        if full_path.exists():
            if full_path.is_file():
                try:
                    with open(full_path, 'r', encoding='utf-8') as f:
                        content = f.read()[:500]  # Primeiros 500 chars
                        techniques.append({
                            "source": str(file_path),
                            "content": content,
                            "type": "framework"
                        })
                except:
                    pass
    
    print(f"üìö Carregadas {len(techniques)} t√©cnicas do toolkit")
    return techniques

def simulate_sales_conversation():
    """Simula uma conversa de vendas para teste"""
    api_key = os.getenv('OPENAI_API_KEY')
    
    if not api_key:
        print("‚ùå Configure OPENAI_API_KEY primeiro")
        return
    
    client = openai.OpenAI(api_key=api_key)
    techniques = read_sales_toolkit()
    
    # Contexto do toolkit
    context = "\n".join([t["content"][:200] for t in techniques[:2]])
    
    print("\nüéØ SIMULADOR DE VENDAS IA")
    print("=" * 50)
    print("Digite frases que um cliente diria.")
    print("O sistema dar√° sugest√µes baseadas no seu toolkit.")
    print("Digite 'sair' para encerrar.\n")
    
    conversation_history = []
    
    while True:
        try:
            client_input = input("üó£Ô∏è Cliente: ").strip()
            
            if client_input.lower() in ['sair', 'exit', 'quit']:
                break
            
            if not client_input:
                continue
            
            conversation_history.append(f"Cliente: {client_input}")
            
            # Prompt para o GPT
            prompt = f"""Voc√™ √© meu consultor estrat√©gico de vendas IA.

CONTEXTO DO TOOLKIT:
{context}

CONVERSA ATUAL:
{chr(10).join(conversation_history[-3:])}

CLIENTE DISSE: "{client_input}"

Forne√ßa uma sugest√£o estrat√©gica IMEDIATA em m√°ximo 2 frases curtas:"""

            print("ü§î Analisando...")
            
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=150
            )
            
            suggestion = response.choices[0].message.content
            print(f"üí° SUGEST√ÉO: {suggestion}\n")
            
            time.sleep(0.5)  # Pausa para simular processamento
            
        except KeyboardInterrupt:
            print("\nüëã Encerrando...")
            break
        except Exception as e:
            print(f"‚ùå Erro: {e}")

def main():
    """Fun√ß√£o principal"""
    console = setup_console()
    
    if RICH_AVAILABLE:
        console.print(Panel.fit(
            "[bold blue]üöÄ SALES AGENT IA - TESTE B√ÅSICO[/bold blue]\n"
            "[cyan]Vers√£o simplificada para valida√ß√£o[/cyan]",
            border_style="blue"
        ))
    else:
        print("üöÄ SALES AGENT IA - TESTE B√ÅSICO")
        print("=" * 40)
    
    print("\nüìã CHECKLIST DE VALIDA√á√ÉO:")
    
    # 1. Verifica arquivo .env
    if os.path.exists('.env'):
        print("‚úÖ Arquivo .env encontrado")
    else:
        print("‚ùå Arquivo .env n√£o encontrado")
        return
    
    # 2. Testa OpenAI
    if test_openai_connection():
        print("‚úÖ OpenAI configurada corretamente")
    else:
        print("‚ùå Problema com OpenAI")
        return
    
    # 3. Verifica toolkit
    if Path("AE_SENIOR_TOOLKIT").exists():
        print("‚úÖ Toolkit encontrado")
    else:
        print("‚ùå AE_SENIOR_TOOLKIT n√£o encontrado")
    
    print("\nüéØ SISTEMA PRONTO! Iniciando simulador...\n")
    
    # Inicia simulador
    simulate_sales_conversation()
    
    print("\nüìä PR√ìXIMOS PASSOS:")
    print("1. ‚úÖ OpenAI funcionando")
    print("2. ‚è≥ Instalar depend√™ncias de √°udio")
    print("3. ‚è≥ Ativar captura de √°udio em tempo real")
    print("4. ‚è≥ Interface de overlay")
    
    print("\nüëã Obrigado por testar o Sales Agent IA!")

if __name__ == "__main__":
    main()
